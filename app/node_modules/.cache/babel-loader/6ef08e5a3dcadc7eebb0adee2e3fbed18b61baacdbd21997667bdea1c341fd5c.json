{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dan62\\\\Downloads\\\\LestaAPI-v_2-main\\\\LestaAPI-v.2-main\\\\Project-LestaAPI-main\\\\app\\\\src\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './LoginPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginPage({\n  onLogin,\n  onRegister\n}) {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleLogin = async () => {\n    try {\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        onLogin(data);\n      } else {\n        setErrorMessage('Неверное имя пользователя или пароль');\n      }\n    } catch (error) {\n      setErrorMessage('Ошибка при авторизации');\n      console.error('Ошибка при авторизации:', error);\n    }\n  };\n  const handleRegister = async () => {\n    try {\n      const response = await fetch('/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        onRegister(data);\n      } else {\n        setErrorMessage('Ошибка при регистрации');\n      }\n    } catch (error) {\n      setErrorMessage('Ошибка при регистрации');\n      console.error('Ошибка при регистрации:', error);\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (isRegistering) {\n      handleRegister();\n    } else {\n      handleLogin();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isRegistering ? 'Регистрация' : 'Авторизация'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login-form\",\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"XZFeUmsteMbvZGq8cTM+CXY4yzA=\");\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LoginPage","onLogin","onRegister","_s","username","setUsername","password","setPassword","isRegistering","setIsRegistering","errorMessage","setErrorMessage","handleLogin","response","fetch","method","headers","body","JSON","stringify","ok","data","json","error","console","handleRegister","handleSubmit","event","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/dan62/Downloads/LestaAPI-v_2-main/LestaAPI-v.2-main/Project-LestaAPI-main/app/src/LoginPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './LoginPage.css';\r\n\r\nfunction LoginPage({ onLogin, onRegister }) {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const response = await fetch('/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        onLogin(data);\r\n      } else {\r\n        setErrorMessage('Неверное имя пользователя или пароль');\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage('Ошибка при авторизации');\r\n      console.error('Ошибка при авторизации:', error);\r\n    }\r\n  };\r\n\r\n  const handleRegister = async () => {\r\n    try {\r\n      const response = await fetch('/api/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        onRegister(data);\r\n      } else {\r\n        setErrorMessage('Ошибка при регистрации');\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage('Ошибка при регистрации');\r\n      console.error('Ошибка при регистрации:', error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (isRegistering) {\r\n      handleRegister();\r\n    } else {\r\n      handleLogin();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>{isRegistering ? 'Регистрация' : 'Авторизация'}</h2>\r\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n      <form className=\"login-form\" onSubmit={handleSubmit}>\r\n        {/* ... остальная часть формы */}\r\n      </form>\r\n      {/* ... остальная часть компонента */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}